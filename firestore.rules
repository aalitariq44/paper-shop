rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Validate user data only for writes
    function isValidUserData(data) {
      return data.keys().hasAll(['name', 'email'])
        && data.name is string && data.name.size() > 0 && data.name.size() <= 100
        && data.email is string && data.email.matches(/^[^@\s]+@[^@\s]+\.[^@\s]+$/);
    }

    // Validate order data only for writes
    function isValidOrderData(data) {
      return data.keys().hasAll(['userId', 'items', 'total'])
        && data.userId is string && data.userId == request.auth.uid
        && data.items is list && data.items.size() > 0
        && data.total is number && data.total >= 0;
    }

    match /users/{userId} {
      // Reads: allow owner to read without referencing request.resource
      allow read: if isOwner(userId);

      // Writes: only owner and must pass payload validation
      allow create, update: if isOwner(userId) && isValidUserData(request.resource.data);
      allow delete: if isOwner(userId);
    }

    match /orders/{orderId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && isValidOrderData(request.resource.data);
      allow update: if isSignedIn() && isValidOrderData(request.resource.data);
      allow delete: if false; // usually do not allow deleting orders
    }
  }
}